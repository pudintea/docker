> mkdir mysql_data
> mkdir wordpress
> nano docker-compose.yml

version: '3.8'

services:
  mysql:
    image: mysql:5.7  # Menggunakan versi MySQL yang lebih kompatibel
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: root_password  # Sesuaikan dengan password root yang kuat
      MYSQL_DATABASE: wordpress_db  # Nama database untuk WordPress
      MYSQL_USER: wordpress_user  # Pengguna database khusus untuk WordPress
      MYSQL_PASSWORD: wordpress_password  # Kata sandi untuk pengguna WordPress
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - wordpress_network
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  wordpress:
    image: wordpress:latest
    container_name: wordpress_app
    ports:
      - "8080:80"
    volumes:
      - ./wordpress:/var/www/html
    environment:
      WORDPRESS_DB_HOST: mysql_db  # Nama service MySQL untuk koneksi
      WORDPRESS_DB_USER: wordpress_user
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress_db
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - wordpress_network
    restart: always

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin_app
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql_db  # Host name MySQL
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root_password
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - wordpress_network
    restart: always

volumes:
  wordpress:
    driver: local
  mysql_data:
    driver: local

networks:
  wordpress_network:
    driver: bridge


====================================
docker-compose down
docker-compose up -d



Jika ada error, Lihat Log
=========================
docker logs mysql_db
docker logs wordpress_app
docker logs phpmyadmin_app


MENONAKTIFKAN PHPMYADMIN
==========================

Menonaktifkan Akses phpMyAdmin
Anda bisa menghentikan layanan phpMyAdmin dengan perintah berikut:
> docker-compose stop phpmyadmin
Ini akan menghentikan phpMyAdmin tanpa menghapus container, jadi Anda bisa memulai kembali saat dibutuhkan tanpa harus mengonfigurasi ulang.

Mengaktifkan Kembali phpMyAdmin Saat Dibutuhkan
Untuk memulai kembali layanan phpMyAdmin, jalankan:
> docker-compose start phpmyadmin

Alternatif: Menggunakan Docker Compose Override
Jika ingin menonaktifkan akses secara default,
Anda bisa membuat file docker-compose.override.yml tanpa layanan phpmyadmin,
lalu mengaktifkan dengan perintah docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d.

IMPORT MYSQL VIA CLI
====================
Untuk mengimpor file SQL yang lebih besar ke MySQL di Docker melalui CLI,
Anda bisa menggunakan perintah docker exec untuk menjalankan proses impor langsung ke dalam container MySQL. Berikut adalah langkah-langkahnya:

Langkah-Langkah Import SQL via CLI
Pastikan File SQL Tersedia di Host Simpan file SQL yang ingin diimpor pada mesin host,
misalnya dengan nama backup.sql.

Gunakan docker cp untuk Memasukkan File ke Container Salin file SQL ke dalam container MySQL untuk memastikan aksesnya:

> docker cp /path/to/backup.sql mysql_db:/backup.sql

Eksekusi Import ke MySQL Jalankan perintah berikut untuk mengimpor file SQL ke database MySQL dalam container.
Gantilah wordpress_db, wordpress_user, dan wordpress_password sesuai dengan pengaturan yang sudah Anda buat.

> docker exec -i mysql_db mysql -u wordpress_user -pwordpress_password wordpress_db < /backup.sql

Keterangan
-i memastikan perintah dijalankan dengan input dari file SQL.
Gantilah wordpress_db, wordpress_user, dan wordpress_password dengan nama database, username, dan password Anda.
Verifikasi Hasil Import Setelah impor selesai, Anda bisa memverifikasi apakah data berhasil diimpor dengan mengakses database dari aplikasi atau phpMyAdmin.

Alternatif:
Menjalankan docker exec Langsung tanpa docker cp
Jika file SQL ada di mesin host dan Anda ingin langsung mengimpornya ke database, Anda bisa mengarahkan input dari file tersebut dengan cara ini:

> cat /path/to/backup.sql | docker exec -i mysql_db mysql -u wordpress_user -pwordpress_password wordpress_db

Perhatikan bahwa tidak ada spasi antara -p dan wordpress_password.
Perintah ini membaca file SQL langsung dari mesin host dan mengirimkannya sebagai input ke MySQL di container.

Sudah saya coba
> cat nama_db.sql | docker exec -i mysql_db mysql -u root -proot_password wordpress_db

=============== END ====================
